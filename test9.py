# -*- coding: utf-8 -*-
# This is a PyDoppler GUI developed by S.H. Ramirez 
# Pydoppler is a python wrapper, developed by J.V. Hernandez-Santisteban, for Henk Spruit's doppler tomography software.

# WARNING: Do not edit this file unless you know what you're doing.
import sys
import os
import matplotlib
matplotlib.use('Qt5Agg')
import matplotlib.cm as cm
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QComboBox, QSpinBox,QProgressBar
from PyQt5.QtCore import QObject, QThread, pyqtSignal, QDir,Qt
import pydoppler2
import matplotlib.pyplot as plt
import numpy as np
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg, NavigationToolbar2QT as NavigationToolbar
from matplotlib.figure import Figure




dop = pydoppler2.spruit()


#Class DoubleSlider taken from jdreaver/double_slider.py
#To use slider with floats instead of integers

class DoubleSlider(QtWidgets.QSlider):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.decimals = 2
        self._max_int = 10 ** self.decimals

        super().setMinimum(0.0)
        super().setMaximum(self._max_int)

        self._min_value = 0.0
        self._max_value = 1.0

    @property
    def _value_range(self):
        return self._max_value - self._min_value

    def value(self):
        return float(super().value()) / self._max_int * self._value_range + self._min_value

    def setValue(self, value):
        super().setValue(int((value - self._min_value) / self._value_range * self._max_int))

    def setMinimum(self, value):
        if value > self._max_value:
            raise ValueError("Minimum limit cannot be higher than maximum")

        self._min_value = value
        self.setValue(self.value())

    def setMaximum(self, value):
        if value < self._min_value:
            raise ValueError("Minimum limit cannot be higher than maximum")

        self._max_value = value
        self.setValue(self.value())

    def minimum(self):
        return self._min_value

    def maximum(self):
        return self._max_value

class ErrorWindow(QtWidgets.QWidget):
    def __init__(self,mystring):
        super().__init__()
        self.setGeometry(QtCore.Rect(500,180,200,200))
        self.setWindowTitle("Error")
        self.setWindowFlags(Qt.FramelessWindowHint)
        self.setMaximumSize(QtCore.QSize(200,200))
        self.setMinimumSize(QtCore.QSize(200,200))
        
        self.label_error=QtWidgets.QLabel(self)
        self.label_error.setGeometry(QtCore.QRect(10,10,90,16))
        self.label_error.setTextFormat(QtCore.Qt.PlainText)
        self.label_error.setObjectName("label_error")
        self.label_error.setText(mystring)
        
        self.pushButton_ok=QtWidgets.QPushButton(self)
        self.pushButton_ok.setGeometry(QtCore.QRect(20,20,90,16))
        self.pushButton_ok.setObjectName("pushButton_ok")
        self.pushButton_ok.clicked.connect(self.accept)
        
    def accept():
        self.close()
             

class PropWindow(QtWidgets.QWidget):
    submit_properties=pyqtSignal(list)
    def __init__(self):
        super().__init__()
        self.setGeometry(QtCore.QRect(500,180,300, 450))
        self.setWindowTitle("Advanced Properties")
        self.setWindowFlags(QtCore.Qt.WindowCloseButtonHint)
        self.setMaximumSize(QtCore.QSize(300, 450))
        self.setMinimumSize(QtCore.QSize(300, 450))
        self.setWindowModality(0)
        #NUMBER OF BINS
        self.label_bins = QtWidgets.QLabel(self)
        self.label_bins.setGeometry(QtCore.QRect(10, 10, 71, 16))
        self.label_bins.setTextFormat(QtCore.Qt.PlainText)
        self.label_bins.setObjectName("label_bins")
        self.label_bins.setText("Bins:")       
        self.sbox_bins=QSpinBox(self)
        self.sbox_bins.setMinimum(1)
        self.sbox_bins.setGeometry(QtCore.QRect(40,8,50,20))
        self.sbox_bins.setValue(dop.nbins)
        
        #type of likelihood function (ih=1 for chi-squared)
        self.label_ih = QtWidgets.QLabel(self)
        self.label_ih.setGeometry(QtCore.QRect(10, 30, 71, 16))
        self.label_ih.setTextFormat(QtCore.Qt.PlainText)
        self.label_ih.setObjectName("label_ih")
        self.label_ih.setText("ih:")       
        self.combo_ih = QComboBox(self)
        self.combo_ih.addItem("0")
        self.combo_ih.addItem("1")
        self.combo_ih.setGeometry(QtCore.QRect(40,30,50,16))
        
        # iw=1 if error bars are to be read and used
        self.label_iw = QtWidgets.QLabel(self)
        self.label_iw.setGeometry(QtCore.QRect(10, 50, 71, 16))
        self.label_iw.setTextFormat(QtCore.Qt.PlainText)
        self.label_iw.setObjectName("label_iw")
        self.label_iw.setText("iw:")       
        self.combo_iw = QComboBox(self)
        self.combo_iw.addItem("0")
        self.combo_iw.addItem("1")
        self.combo_iw.setGeometry(QtCore.QRect(40,50,50,16))
	
	#pb0 # inferior limit of phases to be ignored, between 0 and 1
        self.label_pb0 = QtWidgets.QLabel(self)
        self.label_pb0.setGeometry(QtCore.QRect(30, 80, 71, 16))
        self.label_pb0.setTextFormat(QtCore.Qt.PlainText)
        self.label_pb0.setObjectName("label_pb0")
        self.label_pb0.setText("pb0:") 
        self.labelval_pb0 = QtWidgets.QLabel(self)
        self.labelval_pb0.setGeometry(QtCore.QRect(60, 80, 50, 16))
        self.labelval_pb0.setText(str(dop.pb0)) 
               
        self.slider_pb0=DoubleSlider(Qt.Horizontal,self)
        #self.slider_pb0.setTickPosition(QtWidgets.QSlider.TicksBothSides)
        #self.slider_pb0.setTickInterval(0.05)
        self.slider_pb0.setGeometry(QtCore.QRect(10,70,100,10))
        self.slider_pb0.valueChanged.connect(self.slidechange)
        self.slider_pb0.setValue(dop.pb0)
        
        #pb1 # superior limit of phases to be ignored, between 0 and 1
        self.label_pb1 = QtWidgets.QLabel(self)
        self.label_pb1.setGeometry(QtCore.QRect(120, 80, 71, 16))
        self.label_pb1.setTextFormat(QtCore.Qt.PlainText)
        self.label_pb1.setObjectName("label_pb1")
        self.label_pb1.setText("pb1:") 
        self.labelval_pb1 = QtWidgets.QLabel(self)
        self.labelval_pb1.setGeometry(QtCore.QRect(150, 80, 50, 16))
        self.labelval_pb1.setText(str(dop.pb1)) 
               
        self.slider_pb1=DoubleSlider(Qt.Horizontal,self)
        #self.slider_pb1.setTickPosition(QtWidgets.QSlider.TicksBothSides)
        #self.slider_pb1.setTickInterval(0.05)
        self.slider_pb1._min_value=1.0
        self.slider_pb1._max_value = 2.0
        #self.slider_pb1.setInvertedAppearance(True)
        self.slider_pb1.setGeometry(QtCore.QRect(120,70,100,10))
        self.slider_pb1.valueChanged.connect(self.slidechange2)
        self.slider_pb1.setValue(dop.pb1)
        
         # smearing width in default map
        self.label_ns = QtWidgets.QLabel(self)
        self.label_ns.setGeometry(QtCore.QRect(10, 100, 71, 25))
        self.label_ns.setTextFormat(QtCore.Qt.PlainText)
        self.label_ns.setObjectName("label_ns")
        self.label_ns.setText("ns:")       
        self.sbox_ns=QSpinBox(self)
        self.sbox_ns.setGeometry(QtCore.QRect(40,100,50,20))
        self.sbox_ns.setValue(dop.ns)
        
        # accuracy of convergence
        self.label_ac=QtWidgets.QLabel(self)
        self.label_ac.setGeometry(QtCore.QRect(10,120,71,16))
        self.label_ac.setTextFormat(QtCore.Qt.PlainText)
        self.label_ac.setObjectName("label_ac")
        self.label_ac.setText("ac:")
        self.lineEdit_ac=QtWidgets.QLineEdit(self)
        self.lineEdit_ac.setGeometry(QtCore.QRect(40,120,71,16))
        self.lineEdit_ac.setText(str(dop.ac))
        
        # max no of iterations
        self.label_nim = QtWidgets.QLabel(self)
        self.label_nim.setGeometry(QtCore.QRect(10, 140, 71, 25))
        self.label_nim.setTextFormat(QtCore.Qt.PlainText)
        self.label_nim.setObjectName("label_nim")
        self.label_nim.setText("nim:")       
        self.sbox_nim=QSpinBox(self)
        self.sbox_nim.setGeometry(QtCore.QRect(40,140,50,20))
        self.sbox_nim.setMaximum(1000)
        self.sbox_nim.setMinimum(1)
        self.sbox_nim.setValue(dop.nim)
        
        # starting value of alfa
        self.label_al0 = QtWidgets.QLabel(self)
        self.label_al0.setGeometry(QtCore.QRect(10, 160, 71, 25))
        self.label_al0.setTextFormat(QtCore.Qt.PlainText)
        self.label_al0.setObjectName("label_al0")
        self.label_al0.setText("al0:")
        self.lineEdit_al0=QtWidgets.QLineEdit(self)
        self.lineEdit_al0.setGeometry(QtCore.QRect(40,160,71,16))
        self.lineEdit_al0.setText(str(dop.al0)) 
        
        #factor
        self.label_alf = QtWidgets.QLabel(self)
        self.label_alf.setGeometry(QtCore.QRect(10, 180, 71, 25))
        self.label_alf.setTextFormat(QtCore.Qt.PlainText)
        self.label_alf.setObjectName("label_al0")
        self.label_alf.setText("alf:")
        self.lineEdit_alf=QtWidgets.QLineEdit(self)
        self.lineEdit_alf.setGeometry(QtCore.QRect(40,180,71,16))
        self.lineEdit_alf.setText(str(dop.alf))   
        
        #max number of alfas
        self.label_nal = QtWidgets.QLabel(self)
        self.label_nal.setGeometry(QtCore.QRect(10, 200, 71, 25))
        self.label_nal.setTextFormat(QtCore.Qt.PlainText)
        self.label_nal.setObjectName("label_nal")
        self.label_nal.setText("nal:")       
        self.sbox_nal=QSpinBox(self)
        self.sbox_nal.setGeometry(QtCore.QRect(40,200,50,20))
        self.sbox_nal.setMaximum(1000)       
        self.sbox_nal.setValue(dop.nal)
        
        # C-aim
        self.label_clim = QtWidgets.QLabel(self)
        self.label_clim.setGeometry(QtCore.QRect(10, 220, 71, 25))
        self.label_clim.setTextFormat(QtCore.Qt.PlainText)
        self.label_clim.setObjectName("label_clim")
        self.label_clim.setText("clim:")
        self.lineEdit_clim=QtWidgets.QLineEdit(self)
        self.lineEdit_clim.setGeometry(QtCore.QRect(40,220,71,16))
        #self.lineEdit_clim.setInputMask(000.000000)
        self.lineEdit_clim.setText(str(dop.clim)) 
        
        # printout control for standard output channel (ipri=2 for full)
        self.label_ipri= QtWidgets.QLabel(self)
        self.label_ipri.setGeometry(QtCore.QRect(10, 240, 71, 25))
        self.label_ipri.setTextFormat(QtCore.Qt.PlainText)
        self.label_ipri.setObjectName("label_ipri")
        self.label_ipri.setText("ipri:")       
        self.sbox_ipri=QSpinBox(self)
        self.sbox_ipri.setGeometry(QtCore.QRect(40,240,50,20))
        self.sbox_ipri.setMaximum(2)       
        self.sbox_ipri.setValue(dop.ipri)
        
        # norm=1 for normalization to flat light curve
        self.label_norm = QtWidgets.QLabel(self)
        self.label_norm.setGeometry(QtCore.QRect(10, 260, 71, 25))
        self.label_norm.setTextFormat(QtCore.Qt.PlainText)
        self.label_norm.setObjectName("label_norm")
        self.label_norm.setText("norm:")       
        self.sbox_norm=QSpinBox(self)
        self.sbox_norm.setGeometry(QtCore.QRect(40,260,50,20))
        self.sbox_norm.setMaximum(10)       
        self.sbox_norm.setValue(dop.norm)
        
        # width of central absorption fudge
        self.label_wid = QtWidgets.QLabel(self)
        self.label_wid.setGeometry(QtCore.QRect(10, 280, 71, 25))
        self.label_wid.setTextFormat(QtCore.Qt.PlainText)
        self.label_wid.setObjectName("label_wid")
        self.label_wid.setText("wid:")
        self.lineEdit_wid=QtWidgets.QLineEdit(self)
        self.lineEdit_wid.setGeometry(QtCore.QRect(40,283,71,16))
        #self.lineEdit_clim.setInputMask(000.000000)
        self.lineEdit_wid.setText(str(dop.wid)) 
        
        # amplitude of central absorption fudge
        self.label_af = QtWidgets.QLabel(self)
        self.label_af.setGeometry(QtCore.QRect(10, 300, 71, 25))
        self.label_af.setTextFormat(QtCore.Qt.PlainText)
        self.label_af.setObjectName("label_af")
        self.label_af.setText("af:")
        self.lineEdit_af=QtWidgets.QLineEdit(self)
        self.lineEdit_af.setGeometry(QtCore.QRect(40,303,71,16))
        #self.lineEdit_clim.setInputMask(000.000000)
        self.lineEdit_af.setText(str(dop.af))
        
        #Exposure time in terms of orbital phase
        
        self.label_overs = QtWidgets.QLabel(self)
        self.label_overs.setGeometry(QtCore.QRect(10, 335, 71, 16))
        self.label_overs.setTextFormat(QtCore.Qt.PlainText)
        self.label_overs.setObjectName("label_overs")
        self.label_overs.setText("overs:") 
        self.labelval_overs = QtWidgets.QLabel(self)
        self.labelval_overs.setGeometry(QtCore.QRect(50, 335, 50, 16))
        self.labelval_overs.setText(str(dop.overs)) 
               
        self.slider_overs=DoubleSlider(Qt.Horizontal,self)
        self.slider_overs.setGeometry(QtCore.QRect(10,325,100,10))
        self.slider_overs.valueChanged.connect(self.slidechange_overs)
        self.slider_overs.setValue(dop.overs)
        self.slider_overs.setMaximum(1)
        
        self.label_delw = QtWidgets.QLabel(self)
        self.label_delw.setGeometry(QtCore.QRect(10, 350, 71, 25))
        self.label_delw.setTextFormat(QtCore.Qt.PlainText)
        self.label_delw.setObjectName("label_delw")
        self.label_delw.setText("delw:")
        self.lineEdit_delw=QtWidgets.QLineEdit(self)
        self.lineEdit_delw.setGeometry(QtCore.QRect(45,355,71,16))
        #self.lineEdit_delw.setInputMask(000.000000)
        self.lineEdit_delw.setText(str(dop.delw)) 
        
        self.label_delta = QtWidgets.QLabel(self)
        self.label_delta.setGeometry(QtCore.QRect(10, 370, 71, 25))
        self.label_delta.setTextFormat(QtCore.Qt.PlainText)
        self.label_delta.setObjectName("label_delta")
        self.label_delta.setText("delta phase:")
        self.lineEdit_delta=QtWidgets.QLineEdit(self)
        self.lineEdit_delta.setGeometry(QtCore.QRect(84,375,71,16))
        #self.lineEdit_delw.setInputMask(000.000000)
        self.lineEdit_delta.setText(str(dop.delta_phase)) 
        
        
        self.pushButton_set = QtWidgets.QPushButton(self)
        self.pushButton_set.setGeometry(QtCore.QRect(100, 410, 80, 23))
        self.pushButton_set.setObjectName("pushButton_set")
        self.pushButton_set.clicked.connect(self.update_prop)      
        self.pushButton_set.setText("Set")

    def update_prop(self):
        dop.nbins=int(self.sbox_bins.text())
        dop.ih=int(self.combo_ih.currentText())
        dop.iw=int(self.combo_iw.currentText()) 
        dop.pb0=float(self.labelval_pb0.text())  
        dop.pb1=float(self.labelval_pb1.text()) 
        dop.ns=int(self.sbox_ns.text())
        dop.ac=float(self.lineEdit_ac.text())
        dop.nim=int(self.sbox_nim.text()) 
        dop.al0=float(self.lineEdit_al0.text())   
        dop.alf=float(self.lineEdit_alf.text())
        dop.nal=int(self.sbox_nal.text())
        dop.clim=float(self.lineEdit_clim.text())
        dop.ipri=int(self.sbox_ipri.text())
        dop.norm=int(self.sbox_norm.text())
        dop.wid=float(self.lineEdit_wid.text())
        dop.af=float(self.lineEdit_af.text())
        dop.overs=float(self.labelval_overs.text())
        dop.delw=float(self.lineEdit_delw.text())
        dop.delta_phase=float(self.lineEdit_delta.text())
        self.close() 

    def slidechange(self):
        self.labelval_pb0.setText(str(self.slider_pb0.value()))
        
    def slidechange2(self):
        self.labelval_pb1.setText(str(self.slider_pb1.value()))
    
    def slidechange_overs(self):
        self.labelval_overs.setText(str(self.slider_overs.value()))
      
class WorkerSignals(QObject):
    submit_dopin=pyqtSignal(list,list,list,list,list,list,list)
    submit_trail=pyqtSignal(list,list)
    submit_dopmap=pyqtSignal(list,float,float)
    submit_reco=pyqtSignal(list,list,list,list,float,float,float,float)
#   submit_stream=pyqtSignal(list,list,list,list,list,list,float,float,list,list,list,list)    
    finished = pyqtSignal()
    progress = pyqtSignal(int)
    
#https://www.learnpyqt.com/tutorials/multithreading-pyqt-applications-qthreadpool/  
#https://realpython.com/python-pyqt-qthread/  
 
class Worker(QObject):
 
    def __init__(self):
        super().__init__()
        self.signals=WorkerSignals()

    def runall(self):
        dop.Foldspec()
        if dop.flag:
            self.signals.finished.emit()
            return
      
        spec_avg,xor,y_lim,linfit,x_lim,vell,y_lim2,trail,extent1=dop.Dopin(continnum_band=dop.cont_lim,plot_median=False,poly_degree=2)
        
        if dop.flag:
            self.signals.finished.emit()
            return
            
        #Perform Doppler Tomography
        dop.Syncdop()
        if dop.flag:
            self.signals.finished.emit()
            return
	# This routine will display the outcome of the Doppler tomography.	
        data,vmin,vmax=dop.Dopmap(limits=[0.05,0.90],colorbar=False,cmaps=plt.cm.gist_stern_r,
		     smooth=True,remove_mean=False)
        
        dmr,dm,trail_dmr,trail_dm,x1_lim,x2_lim,phase0,phase_last = dop.Reco(colorbar=False,limits_spec=[.05,0.85],
        limits=[.05,0.90],cmaps=plt.cm.gist_stern_r)	                                     
        self.signals.submit_dopin.emit(list(spec_avg),list(xor),y_lim,list(linfit),x_lim,list(vell),y_lim2)
        self.signals.submit_trail.emit(list(trail),extent1)
        self.signals.submit_dopmap.emit(list(data),vmin,vmax)
        self.signals.submit_reco.emit(list(dmr),list(dm),list(trail_dmr),list(trail_dm),
        float(x1_lim),float(x2_lim),float(phase0),float(phase_last))
#       self.signals.submit_stream.emit(list(vx),list(vy),list(vkx),list(vky),list(ylx),list(xly),float(vy1),float(vy2),
#       list(conca1),list(conca2),list(conca3),list(conca4))     
        self.signals.finished.emit()
        
    def kill(self):
        dop.flag = True
           


class MplCanvas1(FigureCanvasQTAgg):

    def __init__(self, parent=None,plots_config=1, width=5, height=4, dpi=100):
        fig = Figure(figsize=(width, height), dpi=dpi,tight_layout=True)
        if plots_config==1:
            self.ax1 = fig.add_subplot(111)
        if plots_config==2:
            self.ax1=fig.add_subplot(121)
            self.ax2=fig.add_subplot(122)
        if plots_config==3:
            self.ax1=fig.add_subplot(211)
            self.ax2=fig.add_subplot(212)
 
        super(MplCanvas1, self).__init__(fig)


class Ui_MainWindow(QtWidgets.QMainWindow):
    def __init__(self,parent=None):
        super(Ui_MainWindow,self).__init__()
        self.propw=False
        
        self.qm=0.8
        self.k1 = 35
        self.inc=35
        self.m1=0.4
        self.porb=0.05  
         

        # Basic data for the tomography to work      
        dop.object = 'V1838 Aql Hepsilon'
        dop.base_dir = 'Doppler_UVB2' # Base directory for input spectra
        dop.list = 'phaseu.txt'		# Name of the input file
        dop.lam0 = 3889.055  # Wavelength zero in units of the original spectra
        #dop.delta_phase = 0.01012
        dop.delw = 25	# size of Doppler map in wavelenght
        dop.overs = 0.4# between 0-1, Undersampling of the spectra. 1= Full resolution
        dop.gama = 1  # km /s
        dop.clim=1.6
        #dop.af = 0.1          # amplitude of central absorption fudge
        #dop.wid = 300e5        # width of central absorption fudge
        dop.nbins = 12
        #dop.ns=7
        global cl
        cl=2.997e5
        self.PropertiesWindow=PropWindow()


    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1000, 680)
        #self.setWindowTitle("Interactive PyDoppler")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton_all = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_all.setGeometry(QtCore.QRect(50, 540, 80, 23))
        self.pushButton_all.setObjectName("pushButton_all")
        self.pushButton_all.clicked.connect(self.runLongTask)
        self.pushButton_all.setStyleSheet("background-color : green")

        self.pushButton_abort = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_abort.setGeometry(QtCore.QRect(50, 570, 80, 23))
        self.pushButton_abort.setObjectName("pushButton_abort")
        self.pushButton_abort.clicked.connect(self.runAbort)
        self.pushButton_abort.setEnabled(False)
        self.pushButton_abort.setStyleSheet("background-color : gray")
        
        self.pushButton_propWindow = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_propWindow.setGeometry(QtCore.QRect(10, 280, 130, 23))
        self.pushButton_propWindow.setObjectName("pushButton_propWindow")
        self.pushButton_propWindow.clicked.connect(self.adv_props)
        
        self.pushButton_browse_pha = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_browse_pha.setGeometry(QtCore.QRect(290, 30, 50, 18))
        self.pushButton_browse_pha.setObjectName("pushButton_browse_pha")
        self.pushButton_browse_pha.clicked.connect(self.openfile)
        
        self.pushButton_default_main=QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_default_main.setGeometry(QtCore.QRect(120,10,50,18))
        self.pushButton_default_main.setObjectName("default")
        self.pushButton_default_main.clicked.connect(self.default_vals)
        
        self.mdiArea = QtWidgets.QMdiArea(self.centralwidget)
        self.mdiArea.setGeometry(QtCore.QRect(350, 0, 900, 681))
        self.mdiArea.setObjectName("mdiArea")
        
        self.subwindow_trail = QtWidgets.QWidget()
        self.subwindow_trail.setObjectName("subwindow_trail")
        self.mdiArea.addSubWindow(self.subwindow_trail) 
               
        self.subwindow_avg = QtWidgets.QWidget()
        self.subwindow_avg.setObjectName("subwindow_avg")
        self.mdiArea.addSubWindow(self.subwindow_avg)
        
        self.subwindow_reco = QtWidgets.QWidget()
        self.subwindow_reco.setObjectName("subwindow_reco")
        self.mdiArea.addSubWindow(self.subwindow_reco)
                
        self.subwindow_dop = QtWidgets.QWidget()
        self.subwindow_dop.setObjectName("subwindow_dop")
        self.mdiArea.addSubWindow(self.subwindow_dop) 
               
        self.label_prop = QtWidgets.QLabel(self.centralwidget)
        self.label_prop.setGeometry(QtCore.QRect(30, 10, 71, 16))
        self.label_prop.setTextFormat(QtCore.Qt.PlainText)
        self.label_prop.setObjectName("label_prop")
        
        self.label_dir = QtWidgets.QLabel(self.centralwidget)
        self.label_dir.setGeometry(QtCore.QRect(10, 50, 57, 15))
        self.label_dir.setObjectName("label_dir")
        self.label_list = QtWidgets.QLabel(self.centralwidget)
        self.label_list.setGeometry(QtCore.QRect(10, 30, 57, 15))
        self.label_list.setObjectName("label_dir")
        self.label_q = QtWidgets.QLabel(self.centralwidget)
        self.label_q.setGeometry(QtCore.QRect(30, 70, 21, 16))
        self.label_q.setObjectName("label_q")
        self.label_k1 = QtWidgets.QLabel(self.centralwidget)
        self.label_k1.setGeometry(QtCore.QRect(10, 90, 61, 16))
        self.label_k1.setObjectName("label_k1")
        self.label_m1 = QtWidgets.QLabel(self.centralwidget)
        self.label_m1.setGeometry(QtCore.QRect(10, 110, 61, 16))
        self.label_m1.setObjectName("label_m1")
        self.label_Porb = QtWidgets.QLabel(self.centralwidget)
        self.label_Porb.setGeometry(QtCore.QRect(10, 130, 61, 16))
        self.label_Porb.setObjectName("label_Porb")
        self.label_inc = QtWidgets.QLabel(self.centralwidget)
        self.label_inc.setGeometry(QtCore.QRect(10, 150, 61, 16))
        self.label_inc.setObjectName("label_inc")       
        self.label_lam0 = QtWidgets.QLabel(self.centralwidget)
        self.label_lam0.setGeometry(QtCore.QRect(10, 170, 61, 16))
        self.label_lam0.setObjectName("label_lam0")
        self.label_gamma = QtWidgets.QLabel(self.centralwidget)
        self.label_gamma.setGeometry(QtCore.QRect(10, 190, 61, 16))
        self.label_gamma.setObjectName("label_gamma")       
        self.label_mosaic = QtWidgets.QLabel(self.centralwidget)
        self.label_mosaic.setGeometry(QtCore.QRect(295, 70, 41, 16))
        self.label_mosaic.setObjectName("label_mosaic")
        
        self.lineEdit_list = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_list.setGeometry(QtCore.QRect(70, 30, 200, 16))
        self.lineEdit_list.setObjectName("lineEdit_list")
        
        self.lineEdit_dir = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_dir.setGeometry(QtCore.QRect(70, 50, 200, 16))
        self.lineEdit_dir.setObjectName("lineEdit_dir")
        
        self.lineEdit_q = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_q.setGeometry(QtCore.QRect(70, 70, 81, 16))
        self.lineEdit_q.setObjectName("lineEdit_q")
        self.lineEdit_k1 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_k1.setGeometry(QtCore.QRect(70, 90, 81, 16))
        self.lineEdit_k1.setObjectName("lineEdit_k1")
        self.lineEdit_m1 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_m1.setGeometry(QtCore.QRect(70, 110, 81, 16))
        self.lineEdit_m1.setObjectName("lineEdit_m1")
        self.lineEdit_Porb = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_Porb.setGeometry(QtCore.QRect(70, 130, 81, 16))
        self.lineEdit_Porb.setObjectName("lineEdit_Porb")
        self.lineEdit_inc = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_inc.setGeometry(QtCore.QRect(70, 150, 81, 16))
        self.lineEdit_inc.setObjectName("lineEdit_inc")
        self.lineEdit_lam0 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_lam0.setGeometry(QtCore.QRect(70, 170, 81, 16))
        self.lineEdit_lam0.setObjectName("lineEdit_lam0")

        self.lineEdit_gamma = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_gamma.setGeometry(QtCore.QRect(70, 190, 81, 16))
        self.lineEdit_gamma.setObjectName("lineEdit_gamma")

        self.radioButton = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton.setGeometry(QtCore.QRect(307, 90, 16, 21))
        self.radioButton.setText("")
        self.radioButton.setObjectName("radioButton")
        self.radioButton.toggled.connect(self.radiobuttons)
        self.mdiArea.setViewMode(1)
        
        self.label_cont = QtWidgets.QLabel(self.centralwidget)
        self.label_cont.setGeometry(QtCore.QRect(10, 220,125 , 21))
        self.label_cont.setTextFormat(QtCore.Qt.PlainText)
        self.label_cont.setObjectName("label_cont")
        
        
        self.label_x1 = QtWidgets.QLabel(self.centralwidget)
        self.label_x1.setGeometry(QtCore.QRect(10, 240, 20, 16))
        self.label_x1.setObjectName("label_x1") 
        self.lineEdit_x1 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_x1.setGeometry(QtCore.QRect(30, 240, 81, 16))
        self.lineEdit_x1.setObjectName("lineEdit_x1")
        
        self.label_x2 = QtWidgets.QLabel(self.centralwidget)
        self.label_x2.setGeometry(QtCore.QRect(120, 240, 20, 16))
        self.label_x2.setObjectName("label_x2") 
        self.lineEdit_x2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_x2.setGeometry(QtCore.QRect(140, 240, 81, 16))
        self.lineEdit_x2.setObjectName("lineEdit_x2")
        
        self.label_x3 = QtWidgets.QLabel(self.centralwidget)
        self.label_x3.setGeometry(QtCore.QRect(10, 260, 41, 16))
        self.label_x3.setObjectName("label_x3") 
        self.lineEdit_x3 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_x3.setGeometry(QtCore.QRect(30, 260, 81, 16))
        self.lineEdit_x3.setObjectName("lineEdit_x3")
        
        self.label_x4 = QtWidgets.QLabel(self.centralwidget)
        self.label_x4.setGeometry(QtCore.QRect(120, 260, 20, 16))
        self.label_x4.setObjectName("label_x3") 
        self.lineEdit_x4 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_x4.setGeometry(QtCore.QRect(140, 260, 81, 16))
        self.lineEdit_x4.setObjectName("lineEdit_x4")
        
        self.pbar = QProgressBar(self.centralwidget) 
        self.pbar.setGeometry(50, 510, 150, 15) 
        self.pbar.setValue(dop.progress) 
        
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 974, 20))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionNew = QtWidgets.QAction(MainWindow)
        self.actionNew.setObjectName("actionNew")
        self.menuFile.addAction(self.actionNew)
        self.menubar.addAction(self.menuFile.menuAction())
		
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        global layout_dopin
        layout_dopin=QtWidgets.QVBoxLayout(self.subwindow_avg)
        global layout_dop
        layout_dop=QtWidgets.QVBoxLayout(self.subwindow_dop)   
        global layout_reco
        layout_reco=QtWidgets.QVBoxLayout(self.subwindow_reco)
        
        global layout_trail
        layout_trail=QtWidgets.QVBoxLayout(self.subwindow_trail)
    
    def runAbort(self): 
        dop.progress=0 
        self.worker.kill()       
    
    def adv_props(self):        
        self.PropertiesWindow.show()      
    
    def reportProgress(self,progress):
        self.pbar.setValue(progress)
    	
    def runLongTask(self):
        dop.progress=0
        dop.flag=False
        self.pushButton_abort.setEnabled(True)
        self.pushButton_abort.setStyleSheet("background-color : red") 
        # Step 1: Create a QThread object
        self.thread = QThread()
        # Step 2: Create a worker object
        self.worker = Worker()
        # Step 3: Move worker to the thread
        self.worker.moveToThread(self.thread)
        # Step 4: Connect signals and slots
        self.thread.started.connect(self.worker.runall)
        dop.signals.progress.connect(self.reportProgress)
        self.worker.signals.finished.connect(self.thread.quit)
        self.worker.signals.finished.connect(self.worker.deleteLater)      
        self.thread.finished.connect(self.thread.deleteLater)
              
        # Step 6: Start the thread
        self.update_values()
        self.thread.start()
        
        if self.PropertiesWindow.isVisible():       
            self.PropertiesWindow.close()
            
        self.pushButton_all.setEnabled(False)

        self.pushButton_browse_pha.setEnabled(False)
        
        self.thread.finished.connect(
            lambda: self.pbar.setValue(dop.progress)
        )
        
        self.thread.finished.connect(
            lambda: self.pushButton_all.setEnabled(True)
        )
        self.pushButton_browse_pha.setEnabled(False)
        self.thread.finished.connect(
            lambda: self.pushButton_browse_pha.setEnabled(True)
        )
        self.pushButton_propWindow.setEnabled(False)
        self.thread.finished.connect(
            lambda: self.pushButton_propWindow.setEnabled(True)
        )
        self.pushButton_default_main.setEnabled(False)
        self.thread.finished.connect(
            lambda: self.pushButton_default_main.setEnabled(True)
        )
        self.thread.finished.connect(
            lambda: self.pushButton_abort.setEnabled(False)
        )        
        self.thread.finished.connect(
            lambda: self.pushButton_abort.setStyleSheet("background-color : gray")
        )         
        if dop.flag==False:
            self.worker.signals.submit_dopin.connect(self.plot_dopin)
            self.worker.signals.submit_trail.connect(self.plot_trail)
            self.worker.signals.submit_dopmap.connect(self.plot_dopmap)
            self.worker.signals.submit_reco.connect(self.plot_reco)
        
        

    def plot_reco(self,dmr_list,dm_list,trail_dmr_list,trail_dm_list,x1_lim,x2_lim,phase0,phase_last):
        dmr=np.array(dmr_list)
        dm=np.array(dm_list)
        trail_dmr=np.array(trail_dmr_list)
        trail_dm=np.array(trail_dm_list)
        
        limits_spec=[.05,0.85]
        limits_reco=[.05,0.90]
        for i in reversed(range(layout_reco.count())):
            layout_reco.itemAt(i).widget().deleteLater()
        scft=MplCanvas1(self,plots_config=2,width=5,height=4,dpi=100)
        scft.ax1.imshow(trail_dm.T/np.nanmax(trail_dm),interpolation='nearest',
                    cmap=plt.cm.gist_stern_r,aspect='auto',origin='upper',
                    extent=(x1_lim,x2_lim,phase0,
                            phase_last+1/dop.nbins),
                    vmin=limits_spec[0], vmax=limits_spec[1])
        scft.ax1.set_xlabel('Velocity / km s$^{-1}$',fontsize=16)
        scft.ax1.set_xticks([-1000,-500,-0,500,1000])
        scft.ax1.set_xlim(-1200,1200)
        scft.ax1.set_ylabel('Orbital Phase',fontsize=16)
        scft.ax1.tick_params(axis='x', labelsize= 16)
        scft.ax1.tick_params(axis='y', labelsize= 16)
        
        scft.ax2.imshow(trail_dmr.T/np.nanmax(trail_dmr),interpolation='nearest',
                    cmap=plt.cm.gist_stern_r,aspect='auto',origin='upper',
                    extent=(x1_lim,x2_lim,phase0,
                            phase_last+1/dop.nbins),
                    vmin=limits_reco[0], vmax=limits_reco[1])
        scft.ax2.set_xlabel('Velocity / km s$^{-1}$',fontsize=16)
        scft.ax2.tick_params(axis='x', labelsize= 16)
        scft.ax2.set_xticks([-1000,-500,-0,500,1000])
        scft.ax2.set_xlim(-1200,1200)
        scft.ax2.set_yticklabels([]) 
             
        toolbar_reco = NavigationToolbar(scft, self.subwindow_reco)
        layout_reco.addWidget(toolbar_reco)
        layout_reco.addWidget(scft)
        
        
        
    def plot_dopmap(self,data_list,vmin,vmax):
        data=np.array(data_list)
        for i in reversed(range(layout_dop.count())):
            layout_dop.itemAt(i).widget().deleteLater()
        scft=MplCanvas1(self,plots_config=1,width=4,height=5,dpi=100)

        scft.ax1.imshow(data,interpolation='gaussian',
                    cmap=plt.cm.gist_stern_r,aspect='equal',origin='lower',
                    extent=(vmin, vmax,vmin, vmax ),
                    vmin=0.05,vmax=0.90 )
        scft.ax1.tick_params(axis='x', labelsize= 16)
        scft.ax1.tick_params(axis='y', labelsize= 16)
        scft.ax1.set_xlabel('V$_x$ / km s$^{-1}$',fontsize=16)
        scft.ax1.set_ylabel('V$_y$ / km s$^{-1}$',fontsize=16) 
        vx,vy,vkx,vky,ylx,xly,vy1,vy2,conca1,conca2,conca3,conca4=pydoppler2.stream(self.qm,self.k1,self.porb,
        self.m1,self.inc,both_lobes=True,title=True)
        colors="k"
        scft.ax1.plot(vx[:],vy[:],color=colors,marker='') 
        scft.ax1.plot(vkx[:],vky[:],color=colors,marker='')
        scft.ax1.plot(ylx,xly,color=colors)
        scft.ax1.plot(0.,0.,'x',ms =9 ,c =colors,alpha=0.8)
        scft.ax1.plot(0.,-vy1,'+',ms = 10,c =colors,alpha=0.7) 
        scft.ax1.plot(0.,vy2,'+',ms = 10,c =colors,alpha=0.7)
        both_lobes=True
        if both_lobes:
            scft.ax1.plot(conca1,conca2,color=colors,ls='--')
        else:
            scft.ax1.plot(conca3,conca4,color=colors)
        title=True
        if title:
            scft.ax1.set_title(r'$i$='+str(self.inc)[:2]+', M$_w$='+str(self.m1)+' M$_{\odot}$, $q$='+str(self.qm)[:]+', P$_{orb}$='+str(self.porb/3600.)[:4]+' hr',fontsize=16)	   
        toolbar = NavigationToolbar(scft, self.subwindow_dop)
        layout_dop.addWidget(toolbar)
        layout_dop.addWidget(scft)
        
            
    def plot_trail(self,trail_list,extent1):
        trail=np.array(trail_list)
        for i in reversed(range(layout_trail.count())):
            layout_trail.itemAt(i).widget().deleteLater()
        scft=MplCanvas1(self,plots_config=1,width=4,height=5,dpi=100)
        scft.ax1.imshow(trail.T,interpolation='nearest',
                         cmap=plt.cm.binary,
                         aspect='auto',origin='lower',
                         extent=(extent1[0],extent1[1],extent1[2],extent1[3]))	
        toolbar_trail=NavigationToolbar(scft,self.subwindow_trail)
        layout_trail.addWidget(toolbar_trail)
        layout_trail.addWidget(scft)
              
    def plot_dopin(self,spec_avg_list,xor,y_lim,linfit_list,x_lim,vell_list,y_lim2):       
        spec_avg=np.array(spec_avg_list)
        linfit=np.array(linfit_list)
        vell=np.array(vell_list)
        for i in reversed(range(layout_dopin.count())):
            layout_dopin.itemAt(i).widget().deleteLater()
        scft=MplCanvas1(self,plots_config=3,width=4,height=5,dpi=100)
        scft.ax1.plot(dop.wave[0],spec_avg)
        scft.ax1.plot(dop.wave[0],linfit,'r',label='Cont Fit')
        lab1 = 'Cont Bands'
        for i in np.arange(4):
            if i != 0: lab1 = ''
            scft.ax1.axvline(x=xor[i],linestyle='--',color='k',label=lab1)
        scft.ax1.set_ylim(y_lim[0],y_lim[1])
        scft.ax1.set_xlim(x_lim[0],x_lim[1])
        scft.ax1.legend(fontsize=14)   
        scft.ax1.set_xlabel(r'Wavelength / $\AA$')
        scft.ax1.set_ylabel('Input flux')       

        scft.ax2.plot(vell,spec_avg-linfit,color="k")
        scft.ax2.axhline(y=0,linestyle='--',color='k')
        scft.ax2.axvline(x=-dop.delw/dop.lam0*cl,linestyle='-',color='DarkOrange')
        scft.ax2.axvline(x= dop.delw/dop.lam0*cl,linestyle='-',
                    color='DarkOrange',label='DopMap limits') 
        scft.ax2.legend(fontsize=14)
        scft.ax2.set_xlim(-dop.delw/dop.lam0*cl*1.5,dop.delw/dop.lam0*cl*1.5) 
        scft.ax2.set_ylim(y_lim2[0],y_lim2[1])
        scft.ax2.set_xlabel('Velocity km/s')
        scft.ax2.set_ylabel('Bkg subtracted Flux')      
        toolbar_dopin = NavigationToolbar(scft, self.subwindow_avg)
        layout_dopin.addWidget(toolbar_dopin)
        layout_dopin.addWidget(scft)	
    
    
    
    def radiobuttons(self):
        if self.radioButton.isChecked()==True:
            self.mdiArea.tileSubWindows() #Show subwindows
            self.mdiArea.setViewMode(0) #sets view mode as Mosaic when the radiobutton "Mosaic" is toggled
         
        else:
            self.mdiArea.setViewMode(1)
    
    def openfile(self):
        fname=QFileDialog.getOpenFileName(self,"Select Phases-File","phases","TextFile(*.txt)")
        self.lineEdit_list.setText(fname[0])
        path=os.path.dirname(fname[0])
        self.lineEdit_dir.setText(path)
        #dop.list=self.lineEdit_list.text()
        #dop.base_dir=self.lineEdit_dir.text()
    
    def default_vals(self):
        self.lineEdit_list.setText("/home/sergio/Doppler_UVB2/phaseu.txt")
        self.lineEdit_dir.setText("/home/sergio/Doppler_UVB2")
        self.lineEdit_q.setText("0.8")
        self.lineEdit_k1.setText("35")
        self.lineEdit_m1.setText("0.4")
        self.lineEdit_Porb.setText("0.05")
        self.lineEdit_inc.setText("36")
        self.lineEdit_gamma.setText("1")
        self.lineEdit_lam0.setText("3889.055")
        self.lineEdit_x1.setText(str(dop.lam0-30))
        self.lineEdit_x2.setText(str(dop.lam0-20))
        self.lineEdit_x3.setText(str(dop.lam0+20))
        self.lineEdit_x4.setText(str(dop.lam0+30))
        
 
           
    def update_values(self):
        self.qm=float(self.lineEdit_q.text())
        self.k1 =float(self.lineEdit_k1.text())
        self.m1=float(self.lineEdit_m1.text())
        self.porb=float(self.lineEdit_Porb.text())
        self.inc=float(self.lineEdit_inc.text())
        dop.lam0=float(self.lineEdit_lam0.text())
        dop.gamma=float(self.lineEdit_gamma.text())
        dop.list=self.lineEdit_list.text()
        dop.base_dir=self.lineEdit_dir.text() 
        dop.cont_lim[0]=float(self.lineEdit_x1.text()) 
        dop.cont_lim[1]=float(self.lineEdit_x2.text()) 
        dop.cont_lim[2]=float(self.lineEdit_x3.text())
        dop.cont_lim[3]=float(self.lineEdit_x4.text())         
           
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Interactive PyDoppler"))
        self.pushButton_all.setText(_translate("MainWindow", "Run"))
        self.pushButton_propWindow.setText(_translate("MainWindow", "Advanced Properties"))
        self.pushButton_browse_pha.setText(_translate("MainWindow", "Browse"))
        self.pushButton_default_main.setText(_translate("MainWindow", "Default"))
        self.pushButton_abort.setText(_translate("MainWindow", "Abort"))
        
        self.subwindow_trail.setWindowTitle(_translate("MainWindow", "Trail"))
        self.subwindow_avg.setWindowTitle(_translate("MainWindow", "Avg Spec"))
        self.subwindow_reco.setWindowTitle(_translate("MainWindow", "Reco"))
        self.subwindow_dop.setWindowTitle(_translate("MainWindow", "DopMap"))
        self.label_prop.setText(_translate("MainWindow", "Properties"))
        self.label_cont.setText(_translate("MainWindow", "Continuum limits [Å]"))
        self.label_q.setText(_translate("MainWindow", "q"))
        self.label_list.setText(_translate("MainWindow", "phases"))
        self.label_k1.setText(_translate("MainWindow", "k1 [km/s]"))
        self.label_m1.setText(_translate("MainWindow", "m1 [M_☉]"))
        self.label_Porb.setText(_translate("MainWindow", " P_orb [d]"))
        self.label_inc.setText(_translate("MainWindow", "inc [deg]"))
        self.label_dir.setText(_translate("MainWindow", "Directory"))
        self.label_mosaic.setText(_translate("MainWindow", "Mosaic"))
        self.label_lam0.setText(_translate("MainWindow", "λ_0 [Å]"))
        self.label_gamma.setText(_translate("MainWindow", "γ [km/s]"))
        self.label_x1.setText(_translate("MainWindow", "x1:"))
        self.label_x2.setText(_translate("MainWindow", "x2:"))
        self.label_x3.setText(_translate("MainWindow", "x3:"))
        self.label_x4.setText(_translate("MainWindow", "x4:"))

        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.actionNew.setText(_translate("MainWindow", "New"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
